#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <mouse-gesture.dtsi>
#include <scroll-snap.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&trackball {
    cpi = <600>;
    swap-xy;

    // invert-x;
    // invert-y;
};

&mouse_gesture_kp {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&mouse_gesture_mkp {
    tapping-term-ms = <200>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&zip_mouse_gesture {
    stroke-size = <300>; // Optional (default: 500)
    enable-eager-mode; // Optional, but recommended
    history_back {
        pattern = <GESTURE_RIGHT>;
        bindings = <&kp LA(LEFT)>;
    };

    history_forward {
        pattern = <GESTURE_LEFT>;
        bindings = <&kp LA(RIGHT)>;
    };

    close_tab {
        pattern = <GESTURE_DOWN GESTURE_RIGHT>;
        bindings = <&kp LC(W)>;
    };

    new_tab {
        pattern = <GESTURE_DOWN GESTURE_LEFT>;
        bindings = <&kp LC(T)>;
        wait-ms = <20>;  // Optional: wait time between behaviors (default: CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS)
        tap-ms = <40>;   // Optional: press duration for each behavior (default: CONFIG_ZMK_MACRO_DEFAULT_TAP_MS)
    };
};

&zip_temp_layer { require-prior-idle-ms = <200>; };

&mkp_input_listener {
    input-processors = <
        &zip_temp_layer 4 10000
    >;
};

&trackball_listener {
    input-processors = <
        &zip_mouse_gesture
    >;

    auto-mouse-layer {
        layers = <1 4>;
        input-processors = <
            &zip_temp_layer 4 10000
        >;

        process-next;
    };

    scroller {
        layers = <6>;
        input-processors = <
          &zip_xy_to_scroll_mapper
          &zip_scroll_snap
        >;

        process-next;
    };
};

/ {
    // zmk-listeners

    layer_listeners {
        compatible = "zmk,layer-listeners";

        release_alt {
            layers = <5>;
            bindings = <&kt_on LEFT_ALT &kt_off LEFT_ALT>;
        };
    };

    macros {
        // zmk-listeners

        to_kp: to_kp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &to MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "to_kp";
        };

        // zmk-listeners

        mo_to_0: mo_to_0 {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to 0>;

            label = "MO_to_0";
        };
    };

    behaviors {
        // Layout shift

        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Layout shift

        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };

        // zmk-listeners

        kt_on: key_toggle_on_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle On";
            toggle-mode = "on";
        };

        // zmk-listeners

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };

        // zmk-listeners

        lt_to_0: lt_to_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_to_0";
            bindings = <&mo_to_0>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        td1: tab_ctrl_q {
            compatible = "zmk,behavior-tap-dance";
            label = "tab_ctrl_q";
            #binding-cells = <0>;
            bindings = <&mt LCTRL TAB>, <&kp Q>;
        };

        td2: shift_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "shift_ctrl";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp LCTRL>;
        };

        td3: hz_toALT {
            compatible = "zmk,behavior-tap-dance";
            label = "hz_toALT";
            #binding-cells = <0>;
            bindings = <&lt_to_0 4 GRAVE>;
        };

        td4: f7_toALT_f8 {
            compatible = "zmk,behavior-tap-dance";
            label = "f7_toALT_f8";
            #binding-cells = <0>;
            bindings = <&lt_to_0 4 F7>, <&kp F8>;
        };

        td5: mb2_ctrl+w {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mkp MB2>, <&kp LC(W)>;

            tapping-term-ms = <250>;
        };

        td6: gesture_td5 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mouse_gesture>, <&td5>;

            tapping-term-ms = <150>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        mo {
            bindings = <&mo 3>;
            key-positions = <33 34>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&td1   &kp W         &kp E         &kp R        &kp T        &kp Y      &kp U           &kp I           &kp O            &kp P
&kp A  &kp S         &kp D         &kp F        &kp G        &kp H      &kp J           &kp K           &kp L            &kp MINUS
&kp Z  &kp X         &kp C         &kp V        &kp B        &kp N      &kp M           &kp COMMA       &kp DOT          &kp UP_ARROW  &kp BACKSPACE
&td2   &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 SPACE  &lt 2 ENTER  &kp GRAVE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
            >;
        };

        CTRL_NUM {
            bindings = <
&none      &none      &none      &none      &none      &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &none      &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &none
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };

        SHIFT_FN {
            bindings = <
&kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&none       &none       &none       &none       &none       &none       &none       &none       &none       &none
&none       &none       &none       &none       &none       &none       &none       &none       &none       &trans      &trans
&trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
            >;
        };

        setting {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &bt BT_CLR  &bt BT_CLR_ALL
&bootloader   &none         &none         &none         &none         &none  &none  &none  &none
            >;
        };

        MOUSE {
            bindings = <
&none  &none     &none     &none     &none  &none  &none     &none     &none     &none
&none  &td6 0 0  &mkp MB3  &mkp MB1  &none  &none  &none     &none     &none     &none
&none  &none     &none     &none     &none  &none  &none     &none     &none     &none  &none
&none  &none     &none     &none     &none  &none  &mkp MB1  &mkp MB3  &mkp MB2
            >;
        };

        to_ALT {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none
            >;
        };

        SCROLL {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none
            >;
        };

        ARROW {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
